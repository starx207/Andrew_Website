{"summaries":[{"symbol":{"__symbol":0,"members":[]},"metadata":[{"id":1,"companyId":1,"tags":["SSRS","T-SQL"],"software":"Revaluation Process","title":"Data Mailer","shortDescr":"Data mailers are used at the start of a revaluation to notify property owners of the\n                     upcoming revaluation. It includes a letter explaining the revaluation process and\n                     information about the property. These were created using SQL Server Reporting Services\n                     and T-SQL scripts.","fullDescr":"\n            <div class=\"project data-mailer row\">\n                <p class=\"col-xs-12\">\n                    The data mailer for Muskingum county was the first project I worked on at Appraisal Research\n                    Corporation. Data mailers are info sheets that are sent to the owners of each parcel in a county\n                    before a revaluation starts. The mailer lets the property owners know that there will be appraisers\n                    and photographers making their rounds in the next few weeks to evaluate the value of their property.\n                </p>\n                <a href=\"../img/data-mailer-front.png\" class=\"col-xs-6\">\n                    <img src=\"../img/data-mailer-front.png\" alt=\"Data Mailer Example\" />\n                </a>\n                <a href=\"../img/data-mailer-back.png\" class=\"col-xs-6\">\n                    <img src=\"../img/data-mailer-back.png\" alt=\"Data Mailer Example\" />\n                </a>\n                <p class=\"col-xs-12\">\n                    The back of the mailer shows information about the house on the property (number of rooms, heating,\n                    air conditioning, number of fireplaces, etc.) that the owner can verify and mail back to get the best\n                    possible value for their home.\n                </p>\n            </div>\n        ","infoLearned":"\n            <div class=\"project data-mailer row\">\n                <p class=\"col-xs-12\">\n                    The mailers are created using SQL Server Reporting Services (SSRS). Since this was my first time\n                    using SSRS, I had to learn all the basics in order to complete the project. Specifically, I learned:\n                </p>\n                <div class=\"col-xs-2\"></div>\n                <ul class=\"col-xs-8\">\n                    <li>Creating report layouts in SSRS</li>\n                    <li>Using expressions to mix dynamic and static text</li>\n                    <li>Creating tables driven from SQL queries</li>\n                    <li>Writing SQL stored procedures that accept different parameter types</li>\n                </ul>\n            </div>\n        "},{"id":2,"companyId":1,"tags":["SSRS","T-SQL"],"software":"ARCvantage","title":"Snapshot","shortDescr":"Snapshot is a project dashboard for the ARCvantage web application. It was created\n                     using SQL Server Reporting Services and driven with T-SQL scripts.","fullDescr":"\n            <div class=\"project snapshot row\">\n                <a href=\"../img/snapshot.jpg\" class=\"col-xs-12\">\n                    <img src=\"../img/snapshot.jpg\" alt=\"Snapshot\" />\n                </a>\n                <p class=\"col-xs-12\">\n                    After wetting my feet with the data mailers, I jumped in the deep end of SQL Server Reporting Services\n                    (SSRS) with Snapshot. At its core, Snapshot is a dashboard for ARCvantage, and ARCvantage is\n                    a product that is used for parcel evaluation during a revaluation. Snapshot shows how many parcels\n                    are not started, in progress, and completed for each stage of the revaluation process. From there, the\n                    user can drill down to one of several reports showing the details behind the data.\n                </p>\n                <p class=\"col-xs-8 col-sm-10\">\n                    Snapshot also has a list of contacts within ARC as well as a project blog. The project managers\n                    can use the blog to post messages to the clients, the minutes for project meetings, or whatever else\n                    they want the client to be aware of about the project.\n                    <a href=\"../img/snapshot-blog-detail.png\" class=\"hidden-xs blog-detail\">\n                        <img src=\"../img/snapshot-blog-detail.png\" alt=\"Full Blog\"/>\n                    </a>\n                </p>\n                <a href=\"../img/snapshot-blogs.png\" class=\"col-xs-4 col-sm-2 blog-slider\">\n                    <img src=\"../img/snapshot-blogs.png\" alt=\"Snapshot Blog\" class=\"snapshot\" />\n                </a>\n                <h3 class=\"col-xs-12\">\n                    Viewing different stages of the project\n                </h3>\n                <p class=\"col-xs-12\">\n                    <a href=\"../img/snapshot-slicers.png\" class=\"slicer\">\n                        <img src=\"../img/snapshot-slicers.png\" alt=\"Snapshot Slicers\" />\n                    </a>\n                    The slicer buttons along the left side of Snapshot allow the user to track the progress of\n                    different stages of the project. The buttons flow from top to bottom according to what stage\n                    of the project comes first, second, third, and so on. So a user may click \"Photography\" to see\n                    how many parcels have yet to be photographed, and then click over to \"Parcel Review\" to see\n                    how many parcels the analysts have reviewed so far. A faded button indicates that no data is yet\n                    available for that part of the project.\n                </p>\n                <h3 class=\"col-xs-12\">\n                    Get the breakdown\n                </h3>\n                <p class=\"col-xs-12\">\n                    The main portion of Snapshot is the 2 circle graphs in the center. For any stage of the project\n                    a user is looking at, the left graphs shows the major milestones: Not Started, In Process, Completed.\n                    The right graph shows a breakdown of all the statuses included in a particular milestone. A user can \n                    select a slice of the milestone graph to see the graph on the right change to reflect the breakdown for\n                    that milestone. Clicking a slice of the status graph takes the user to a report that shows all the\n                    details for all parcels assigned to a particular status.\n                </p>\n                <a href=\"../img/snapshot-graphs.png\" class=\"col-xs-12\">\n                    <img src=\"../img/snapshot-graphs.png\" alt=\"Snapshot Graphs\" />\n                </a>\n            </div>\n        ","infoLearned":"\n            <div class=\"project snapshot row\">\n                <p class=\"col-xs-12\">\n                    One of the requirements for Snapshot was that it be done using SSRS to make it as easy to integrate\n                    into ARCvantage as possible. However, the high level of interactivity desired for it, meant I had to\n                    learn quite a few SSRS tricks to achieve the desired result.\n                </p>\n                <h3 class=\"col-xs-12\">\n                    Lots and Lots of Parameters\n                </h3>\n                <p class=\"col-xs-12\">\n                    I learned how to use hidden parameters to make the report feel like an interactive webpage. Any\n                    clickable portion of Snapshot is an action link that reloads the entire report, but changes a\n                    certain parameter (while the rest retain their value).\n                </p>\n                <h3 class=\"col-xs-12\">\n                    Dynamic Styling\n                </h3>\n                <p class=\"col-xs-12\">\n                    In order to provide visual feedback to the user when they click various buttons, I learned that\n                    I could use expressions to set different styling options for different elements. The expressions would\n                    look at the parameter values to determine if a particular button was selected, and style it accordingly.\n                    Some styles were also data-driven, such as when no data is available for a particular stage of the project\n                    so the button appears grayed-out.\n                </p>\n                <h3 class=\"col-xs-12\">\n                    Dynamic Action Links\n                </h3>\n                <p class=\"col-xs-12\">\n                    In addition to styling, some elements required their action to change based on data availability or \n                    parameter selections. The status graph would have to launch different reports with different\n                    pre-selected parameters depending on which stage of the project was being viewed. The project stage\n                    slicers would have to have thier actions disabled if there was no data available for that stage.\n                </p>\n                <h3 class=\"col-xs-12\">\n                    Stored Procedure Optimization\n                </h3>\n                <p class=\"col-xs-12\">\n                    Most project stages have statuses manually assigned by the reviewers. To report these, they simply have\n                    to be aggregated from a status table. However, the statuses for photography and footprints are derived\n                    from other data. The SQL that derives these statuses can sometimes take a while because of calculations\n                    that have to be done with geometry data types. I had to spend a lot of time learning different query\n                    optimization and tuning methods to allow Snapshot to load as fast as possible.\n                </p>\n            </div>\n        ","refactoring":"\n            <div class=\"project snapshot row\">\n                <p class=\"col-xs-12\">\n                    If I were to do this project over again, I would strongly suggest the project not be done in SSRS. \n                    Doing so made it easy to integrate into ARCvantage, but a lot of functionality that\n                    should have been easily implemented was not so easy because SSRS isn't designed to support it.\n                </p>\n                <p class=\"col-xs-12\">\n                    I believe writing Snapshot as a web-application would be a much better and more robust solution. It \n                    would boost the performance of Snapshot considerably because it would be able to take advantage of \n                    AJAX to only reload the relevant portions of Snapshot, instead of reloading the whole thing every time\n                    anything is clicked. It would also allow for much easier maintainability. The complex expressions used\n                    to give Snapshot its current interactivity would be pretty difficult to dicipher for someone else trying\n                    to come in and make changes to it.\n                </p>\n            </div>\n        "},{"id":3,"companyId":1,"tags":["VB.NET","Windows Forms","SQL","Infragistics"],"software":"ARCCama","title":"Field Review Subsystem","shortDescr":"The Field Review Subsystem was developed to allow clients to track and maintain Field\n                     Reviews. A Field Review may be requested by the parcel analyst during a revaluation if\n                     the photographs taken are not sufficent to assign an accurate value to the property.\n                     This was developed as part of the ARCCama Windows Forms Application using VB.NET.","fullDescr":"\n            <div class=\"project field-review row\">\n                <p class=\"col-xs-12\">\n                    When the photographs taken by the photographers during a revaluation aren't enough for the\n                    analysts to accurately assess the value of a parcel, it's time to call for a field review.\n                    A field review involves a Field Lister visiting a parcel in person in order to obtain information\n                    needed to complete the assessment of the parcel.\n                </p>\n                <p class=\"col-xs-12\">\n                    The Field Review Subsystem is a component of ARCama that allows the Field listers to keep track\n                    of requested field reviews. When the screen is opened, the user sees a grid of all the requested\n                    field reviews that have not yet been completed. Completed field reviews can optionally be loaded\n                    by submitting a date range - doing so will load all field reviews completed within the requested\n                    range, as well as incomplete reviews.\n                </p>\n                <a href=\"../img/field-review-grid.jpg\" class=\"col-xs-12\">\n                    <img src=\"../img/field-review-grid.jpg\" alt=\"Field Review Grid\" />\n                </a>\n                <p class=\"col-xs-12\">\n                    There are additional screens from which field reviews can be added, altered, or deleted. When a new\n                    field review is requested, it can be added from here. When a review is completed, the date it was\n                    completed can be added to the request so it no longer shows up in the incomplete list. New field\n                    reviews can also be added by uploading them through an excel spreadsheet.\n                </p>\n            </div>\n        ","refactoring":"\n            <div class=\"project field-review row\">\n                <p class=\"col-xs-12\">\n                    When I created this subsystem, the design specs called for a main page that would show the\n                    grid of incomplete reviews, and 3 other screens: add, edit, and delete. Because I hadn't had much\n                    experience in .NET at this point, I made 4 separate screens to accomplish this. A better implementation\n                    would have been to simply use 2. One screen would have been the grid screen, and the other would be\n                    the add/edit/delete screen. The add/edit/delete screen would change functionality and appearance based\n                    on which button the user would click to get to it.\n                </p>\n                <a href=\"../img/field-reviews-add.png\" class=\"col-xs-12 col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-0\">\n                    <img src=\"../img/field-reviews-add.png\" alt=\"Field Review Grid\" />\n                </a>\n                <a href=\"../img/field-reviews-edit.png\" class=\"col-xs-12 col-sm-6 col-lg-4\">\n                    <img src=\"../img/field-reviews-edit.png\" alt=\"Field Review Grid\" />\n                </a>\n                <a href=\"../img/field-reviews-delete.png\" class=\"col-xs-12 col-sm-6 col-lg-4\">\n                    <img src=\"../img/field-reviews-delete.png\" alt=\"Field Review Grid\" />\n                </a>\n                <p class=\"col-xs-12\">\n                    Implementing it in this way would have also allowed me to adhere to a DRY design. Having 4 separate\n                    screens meant I had to repeat a lot of the same code 3 times; I now know that this is not a good\n                    implementation as it is difficult to maintain. It also makes it more tedious to fix bugs as they \n                    have to be fixed in 3 places instead of just one.\n                </p>\n            </div>\n        "},{"id":4,"companyId":1,"tags":["VB.NET","XSLT","XML","SQL","Windows Forms"],"software":"ARCTax","title":"Taxbill Template Redesign","shortDescr":"The ARCTax tax bills used to be created using a pretty rigid custom-coded template system.\n                     The structure made it very difficult to make changes to the tax bills. The redesign of the\n                     tax bill templates utilized XSLT to make the tax bills more dynamic and flexible. This \n                     allowed for changes to the tax bills to be rapidly deployed at the client's request.","fullDescr":"\n            <div class=\"project taxbill-template row\">\n                <h3 class=\"col-xs-12\">\n                    Out with the old\n                </h3>\n                <p class=\"col-xs-12\">\n                    To print tax bills, ARCtax uses two XML files. The first is called an extract and contains the\n                    raw data that will be contained in the tax bill. The second is the template and provides\n                    instructions to the software of what to draw on the tax bill, where to put it, and where\n                    in the extract the information can be found.\n                </p>\n                <p class=\"col-xs-12\">\n                    The original architecture of the templates only allowed for display of values in the extract.\n                    If several values needed to be summed up and displayed, they had to be summed up and written to\n                    the extract before-hand. It also did not support dynamic content; if a penalty line was required\n                    to be displayed for people who were late in their payments, it had to be statically displayed\n                    for all tax bills and simply show zero as the amount if no penalty was charged.\n                </p>\n                <h3 class=\"col-xs-12\">\n                    In with the new\n                </h3>\n                <p class=\"col-xs-12\">\n                    <a href=\"../img/tax-bill.png\" class=\"bill-example\">\n                        <img src=\"../img/tax-bill.png\" alt=\"Tax Bill Example\" />\n                    </a>\n                    The redesigned tax bill templates utilized XSLT to allow the template itself to manipulate the\n                    data provided by the extract, as well as conditionally display various content. The new template\n                    took the XML in the extract, performed some manipulations to the data, and reformatted it as XML\n                    that the software could interpret into print graphics.\n                </p>\n                <p class=\"col-xs-12\">\n                    There are 6 basic configurations for property tax bills. Tax bills for real estate properties\n                    and for mobile home properties have different configurations, and each of those has a different\n                    configuration depending on whether it is a 1st half, 2nd half, or delinquent bill. Another improvement\n                    brought by the new templates was that each county would only need a single template rather than 6,\n                    because the template could dynamically determine the content to display.\n                </p>\n                <p class=\"col-xs-12\">\n                    The last major improvement the redesigned templates offered was how quickly they could be altered\n                    and deployed. The old templates had to be installed with the software, so when a client requested\n                    a change to their tax bill format, the software had to be reinstalled after the changes were made.\n                    The new templates were stored on a server, which meant changes could be instantly deployed upon\n                    request. No installation necessary!\n                </p>\n            </div>\n        ","infoLearned":"\n            <div class=\"project taxbill-template row\">\n                <h3 class=\"col-xs-12\">\n                    Creating the templates\n                </h3>\n                <p class=\"col-xs-12\">\n                    This project started when another developer suggested XSLT as a technology we could\n                    possibly use to redesign the tax bill templates. Since I was still the new developer, the project\n                    was assigned to me. I had never heard of XSLT before, so I had to spend some time learning all about\n                    it.\n                </p>\n                <a href=\"../img/taxbill-template-xslt.png\" class=\"col-xs-12\">\n                    <img src=\"../img/taxbill-template-xslt.png\" alt=\"Bill Template Example\" />\n                </a>\n                <p class=\"col-xs-12\">\n                    I learned how to create resuable templates by passing parameters to the templates. I used\n                    a collection of generic templates to make designing the tax bill templates for each county easier.\n                    The generic templates are for things like tables and labels that are used frequently for the \n                    tax bills.\n                </p>\n                <h3 class=\"col-xs-12\">\n                    Integrating with .NET\n                </h3>\n                <p class=\"col-xs-12\">\n                    <a href=\"../img/apply-xslt-with-params.png\" class=\"dot-net-example\">\n                        <img src=\"../img/apply-xslt-with-params.png\" alt=\"Applying XSLT Sample\" />\n                    </a>\n                    Once the tax bills were designed, I had to learn how to use .NET to apply the XSLT stylesheet\n                    to the extract that was generated. Additionally, the VB.NET code had to be able to pass parameters\n                    to the stylesheet to specify which type of tax bill to print (1st half, 2nd half, delinquent, Real\n                    Estate, Mobile Home).\n                </p>\n                <p class=\"col-xs-12\">\n                    In addition to printing tax bills one at a time, there's also functionality for mass printing\n                    where several hundred bills can be sent to the printer at once. However, when processing the \n                    templates for such a large number of tax bills, the software would appear to freeze as it did\n                    the processing. To solve that issue, I had to learn how to run the print job as a detached\n                    process that provides feedback to the user as it processes.\n                </p>\n            </div>\n        ","refactoring":"\n            <div class=\"project taxbill-template row\">\n                <p class=\"col-xs-12\">\n                    The original method for printing tax bills used approximately 10 different classes for interpretting\n                    different XML tags. There was an object for a line of text, an object for shapes, an object for containers,\n                    and so on. All these classes worked fine, but as I was looking through the old code, trying to figure out\n                    how it worked before I started the redesign, I decided to do away with most of it and simplify it down to\n                    just 2 classes: one for text, and one for shapes.\n                </p>\n                <p class=\"col-xs-12\">\n                    I spent a lot of time learning how print graphics worked in .NET, and writing the 2 classes that would\n                    interpret the XML. All of that work ate up a lot of development time. I think I could have completed\n                    the project much more quickly and still been able to implement the important improvements had I just\n                    kept the existing .NET structure and used XSLT to make the template dynamic. However, despite creating\n                    more work for myself by taking this approach, I feel that my desing will be easier for future\n                    developers to understand should someone else have to modify it in any way.\n                </p>\n            </div>\n        "},{"id":5,"companyId":1,"tags":["VB.NET","XSLT","XML","SQL","Windows Forms","Infragistics"],"software":"ARCTax","title":"Restructuring of Logging processes","shortDescr":"Many of the detached batch processes that could be run in ARCTax log their results. However,\n                     they didn't all write their logs to the same location or use the same method. The restructuring\n                     involved evaluating all these processes and developing a way to ensure they were all logged \n                     the same way so that there could be one single place in the software to check any log.","fullDescr":"\n            <div class=\"project logging row\">\n                <p class=\"col-xs-12\">\n                    There are many batch processes in ARCtax that create logs of their results. Processes like calculating\n                    taxes for a particular tax year, posting penalty and interest charges, and tax extract generation all\n                    log their results for the user. There were two issues that had to be addressed during the restructuring.\n                </p>\n                <h3 class=\"col-xs-12\">\n                    Location, Location, Location\n                </h3>\n                <p class=\"col-xs-12\">\n                    The logging processes were worked on by many developers over many years, and because there was no standard\n                    method for doing it, each developer used his or her own slightly different method. Additionally, there\n                    were multiple tables in the database where logs could be stored (one process would even create its own\n                    table, if it didn't yet exist, and log to it). Put these two things together and it made it difficult for\n                    users to know which screen to go to in order to see a log from a particular process.\n                </p>\n                <p class=\"col-xs-12\">\n                    After doing a thorough analysis on the various methods used for logging, I came up with a way to have\n                    all the processes log their results the same way. I created a class for running a process in a detached\n                    thread and logging the results automatically. All that had to be done by the developer using it was to\n                    assign a name to the process and give it a function delegate that does the actual processing to be logged.\n                    Optionally, the developer could choose to write a custom log that would be stored rather than the default\n                    log the class provides. All other references in the code that allowed for writing to logging tables in the\n                    database were removed so that only the logging class could write to those tables.\n                </p>\n                <h3 class=\"col-xs-12\">\n                    Prettying things up\n                </h3>\n                <p class=\"col-xs-12\">\n                    The other task involved in the restructuring was to make the logs more readable. All the logs up to \n                    that point were purely text. Developers would try and give them a table-like appearance by using tabs\n                    to align columns of text, but this didn't always work depending on the length of the value being\n                    displayed. It was also not possible to right-align numbers for easy accounting. These limitations\n                    would sometimes make the logs appear almost unreadable.\n                </p>\n                <a href=\"../img/old-log.jpg\" class=\"col-xs-12\">\n                    <img src=\"../img/old-log.jpg\" alt=\"Old Log Example\" />\n                </a>\n                <p class=\"col-xs-12\">\n                    To remedy these issues, I created a log class that could both create and interpret XML logs. I included\n                    an object made from the log class in the logging class so that a developer can choose to either write\n                    a custom log as plain text, or as XML. When displaying the logs, the log class can render the XML in\n                    a few different formats. The main formats are bitmap and excel. The bitmap format is used to display\n                    the log as a nicely formatted image graphic so that it can be easily read. The excel format is used\n                    to export the log to an excel spreadsheet so the data can be further manipulated if needed.\n                </p>\n                <a href=\"../img/new-log.jpg\" class=\"col-xs-12\">\n                    <img src=\"../img/new-log.jpg\" alt=\"New Log Example\" />\n                </a>\n            </div>\n        ","infoLearned":"\n            <div class=\"project logging row\">\n                <p class=\"col-xs-12\">\n                    In this project, I was able to further expand my understanding of XSLT. When doing the tax bill\n                    template redesign, I used parameterized templates that had to have data values passed to them. For this\n                    project, however, I utilized XSLT's template matching to take the XML in the logs and add various\n                    attributes to the elements that defined how different tags should be styled.\n                </p>\n                <p class=\"col-xs-12\">\n                    In addition to the XSLT, I learned a bit about how to create and render bitmaps dynamically. I had\n                    already worked with graphics for tax bill printing, but I found that creating graphics to render to\n                    the screen was a bit different. Once I had a bitmap created, I would add it to a .NET picture box.\n                    To make things easier, I added \"picture box\" as a render format. The picture box returned then had\n                    to be added to a container on the screen so that it could be scrolled, if it was too big to fit on\n                    the screen.\n                </p>\n            </div>\n        "},{"id":6,"companyId":1,"software":"Revaluation Process","tags":["ASP.NET","MVC","ADO.NET","Entity Framework"],"title":"Informal Hearing Website","shortDescr":"At the end of a revaluation, property owners are given the chance to ask questions about thier\n                     new property values. This process is called Informal Hearings and used to be done in-person at the\n                     county courthouse. The Informal Hearing Website, created using ASP.NET MVC 5, allows property owners to submit \n                     inquiries about their new property values online.","fullDescr":"\n            <div class=\"project informal-website row\">\n                <p class=\"col-xs-12\">\n                    One of the final steps in the revaluation process is Informal Hearings. After the new property\n                    values are determined, they are made public on the county website so that property owners\n                    can see their new values. At this point, a property owner may believe their property was valued\n                    incorrectly and wish to present evidence that the value should be higher or lower. Or they may\n                    just have questions about how the value was determined.\n                </p>\n                <p class=\"col-xs-12\">\n                    In the past, to submit an Informal Inquiry, a property owner would have to come talk to a\n                    representative of the appraisal firm during set times at the county courthouse. The Informal\n                    Hearing Website makes it possible for property owners to check their new values and immediately\n                    submit inquiries about the new values.\n                </p>\n                <a href=\"../img/informal-main-page.png\" class=\"col-xs-6\">\n                    <img src=\"../img/informal-main-page.png\" alt=\"Informal Hearings Home Page\" />\n                </a>\n                <a href=\"../img/informal-faq-page.png\" class=\"col-xs-6\">\n                    <img src=\"../img/informal-faq-page.png\" alt=\"Informal Hearings FAQ Page\" />\n                </a>\n                <a href=\"../img/informal-links.jpg\" class=\"col-xs-12\">\n                    <img src=\"../img/informal-links.jpg\" alt=\"Informal Hearings Value Lookup Links\" />\n                </a>\n                <p class=\"col-xs-12\">\n                    The website itself is not complicated. It consists of 2 pages. The main page gives a brief\n                    description of the revaluation process, links to view the new property values, and a place\n                    to download an inquiry form that can be emailed or mailed back. The second page is a Frequently\n                    Asked Questions page. Each county that has ARC do their revaluation can use the site for\n                    their informal hearing process. When the site was initally launched, 9 counties were using it.\n                </p>\n                <h3 class=\"col-xs-12\">\n                    Behind the scenes\n                </h3>\n                <p class=\"col-xs-12\">\n                    The original design of the website called for a simple layout to be created for one county, and\n                    then modify it for each of the 9 counties by basically doing a copy and paste. I thought this\n                    approach sounded tedious and difficult to maintain, especially since more counties than the \n                    original 9 would start using the website in the future. I suggested that instead of that \n                    statically coded approach, we make certain portions of the website dynamic and data-driven. The \n                    end result is a single repository of code to maintain that pulls county-specific information from\n                    a database when the website loads. The URL used to navigate to the site tells the site which\n                    county's information should be loaded.\n                </p>\n                <p class=\"col-xs-12\">\n                    Check out a few of the live webpages here:\n                </p>\n                <ul class=\"col-xs-12\">\n                    <li><a href=\"http://henrycounty.propertyrevaluations.com\">Henry County</a></li>\n                    <li><a href=\"http://mercercounty.propertyrevaluations.com\">Mercer County</a></li>\n                    <li><a href=\"http://vanwertcounty.propertyrevaluations.com\">Van Wert County</a></li>\n                    <li><a href=\"http://preblecounty.propertyrevaluations.com\">Preble County</a></li>\n                </ul>\n                <p class=\"col-xs-12\">\n                    I created the website using a mobile-first MVC design pattern using Entity Framework for the scaffolding.\n                    The model was really only used to provide the county-specific information to the site, and as \n                    such should never be changed by the code. To ensure that it wouldn't be, I modified the ADO.NET\n                    model created by the scaffolding to be read-only, and took away the ability for the model to\n                    save any changes made to it. Additionally, the server connection was read-only to add an extra\n                    layer of protection.\n                </p>\n                <p class=\"col-xs-12\">\n                    <a href=\"../img/informal-error-email.png\" class=\"error-snippet\">\n                        <img src=\"../img/informal-error-email.png\" alt=\"Error Handling Code Snippet\" />\n                    </a>\n                    The last behind-the-scenes feature to note is the error handling for the site. I created a \n                    global filter to catch errors anywhere in the site. From the user's perspective, nothing\n                    happens except being redirected to an error page which asks them to try again later. However,\n                    whenever that error filter is hit, it sends an email to the designated administrator with the\n                    details of the error as well as which site it occurred on so that we can proactively fix any\n                    issues with any of the sites. It allows us to monitor the site performance without having to\n                    keep checking on all 9 sites (and more in the future).\n                </p>\n            </div>\n        ","infoLearned":"\n            <div class=\"project informal-website row\">\n                <p class=\"col-xs-12\">\n                    Before this project, I had dabbled in web development on my own a number of times, but this was the\n                    first time I made a website that was actually published. I learned some of the nuiansces of\n                    troubleshooting a website on a production server. After I had done all the development I needed\n                    to do and published the website on our production server, I discovered that a few things that worked\n                    in my development environment didn't work in production. I also learned that all the features and\n                    functionality need to be tested on all the major browsers your users would be navigating to your site\n                    from. There were little quirks I kept discovering that would only occur on certain browsers, so I had\n                    to ensure the site functioned well no matter what browser it was on.\n                </p>\n                <p class=\"col-xs-12\">\n                    Since this website was made using ASP.NET MVC 5, I learned the basics of Scaffolding with Entity\n                    Framework. It's a small site, so I didn't have to go too deep into it (I went into a lot more\n                    depth with my next project: the admin website), but I was able to get my feet wet learning \n                    the basics of Models, Views, and Controllers.\n                </p>\n            </div>\n        ","refactoring":"\n            <div class=\"project informal-website row\">\n                <p class=\"col-xs-12\">\n                    By the time I was brought in on this project, many meetings had already been held to determine\n                    the design for the site, and I had a limited timeframe in which to complete the site before it\n                    was needed by our clients. One aspect of the design I did not like was the fact that to submit\n                    an inquiry, a user had to download a PDF form, fill it out (either electronically or print it and\n                    complete it by hand), and then either mail or email the form back.\n                </p>\n                <div class=\"hidden-xs col-sm-3\"></div>\n                <a href=\"../img/informal-mobile-view.jpg\" class=\"col-xs-12 col-sm-6\">\n                    <img src=\"../img/informal-mobile-view.jpg\" alt=\"Informal Website Mobile Format\" />\n                </a>\n                <p class=\"col-xs-12\">\n                    I thought that a much better way to do it would have been to create a web form that could be\n                    filled out right from the site and submitted to our analysts. Because the reason for wanting the\n                    inquiries in PDF form was so that we could have documentation of it, I suggested that the site \n                    could convert the submitted web form into a PDF and email it to the analyst responsible for \n                    handling the inquires. I believe that would have made the site much easier to use and still have\n                    met all of our company's needs.\n                </p>\n                <p class=\"col-xs-12\">\n                    In the end, because of time restraints, we decided to keep the site as originally designed\n                    with a downloadable PDF. A future version of the site may be done to include a more user-friendly\n                    web form for inquiry submission.\n                </p>\n            </div>\n        "},{"id":7,"companyId":1,"tags":["ASP.NET","MVC","ADO.NET","Entity Framework","Repository Design Pattern","DRY"],"software":"ARCvantage / Informal Website","title":"Administrative Website","shortDescr":"Both the Informal Hearings Website and Snapshot have elements that can be curated by the project managers.\n                     This admin website was created to allow the project managers control over the portions of those products\n                     that they needed to change on a regular basis. It was created with ASP.NET MVC 5 and implements custom \n                     user authentication to allow access to the site.","fullDescr":"\n            <div class=\"project admin-site row\">\n                <p class=\"col-xs-12\">\n                    I came up with the idea to create this administration web site because, after doing the Informal \n                    Hearing web site, no one was yet able to give me all the needed information to complete all 9 sites.\n                    When I asked, I was told that we didn't have the information yet, so I ended up coding that website\n                    to simply say \"TBD\" if certain information wasn't available. Because that information was contained\n                    in a database, I thought that I should just make another website that our project managers could use\n                    to update the information themselves when it became available.\n                </p>\n                <a href=\"../img/admin-blog-index.jpg\" class=\"col-xs-12\">\n                    <img src=\"../img/admin-blog-index.jpg\" alt=\"Admin Site Blog Manager\" />\n                </a>\n                <p class=\"col-xs-12\">\n                    After I started working on this admin site for the project managers, I thought about how they still\n                    needed something to be able to manage contact information and blog entries in Snapshot, so I decided\n                    to expand this web site to provide basic CRUD operations for those as well.\n                </p>\n                <a href=\"../img/admin-blog-edit.jpg\" class=\"col-xs-12\">\n                    <img src=\"../img/admin-blog-edit.jpg\" alt=\"Admin Site Blog Editor\" />\n                </a>\n                <p class=\"col-xs-12\">\n                    I'm particularly proud of this project because it was mine from start to finish. I came up with the\n                    idea for it, designed it, and coded it. As such, I was able to use whatever design patterns I thought\n                    best in creating the site, and endeavored to use all the best practices for web development and MVC\n                    design that I knew.\n                </p>\n            </div>\n        ","infoLearned":"\n            <div class=\"project admin-site row\">\n                <p class=\"col-xs-12\">\n                    I wet my feet in MVC design patterns with the Informal Hearings website, but with this site, I \n                    went all in. I learned how to take the scaffolded views and controllers and customize them to\n                    my needs. I learned how to use the BindAttribute to prevent overposting attacks.\n                </p>\n                <p class=\"col-xs-12\">\n                    <a href=\"../img/admin-repository-snippet.png\" class=\"repository-snippet\">\n                        <img src=\"../img/admin-repository-snippet.png\" alt=\"Repository Code Snippet\" />\n                    </a>\n                    I learned how to create a loosely coupled model layer using the repository desing pattern. I created\n                    a repository layer between my models and controllers so that a controller never directly calls\n                    a method associated with a model. Instead, the controller calls repository methods which in turn\n                    call the appropriate model methods. This way, changes in the model implementation do not effect\n                    the controller's functionality.\n                </p>\n                <h3 class=\"col-xs-12\">\n                    Keeping it DRY\n                </h3>\n                <p class=\"col-xs-12\">\n                    There were several methods I learned to use in order to make my code DRY. First, I learned to use\n                    data annotations in the models for data validation, which allowed me to define the validation rules\n                    for a particular field in the model only once, but enforce it everywhere. Second, because the site\n                    requires a username and password be authenticated before a user can access the site, I created 2\n                    custom action filters for authentication. \n                </p>\n                <a href=\"../img/admin-action-filter-snippet.png\" class=\"col-xs-12\">\n                    <img src=\"../img/admin-action-filter-snippet.png\" alt=\"Login Action Filter\" />\n                </a>\n                <p class=\"col-xs-12\">\n                    The first filter was to ensure that a valid user was logged in before allowing them to proceed. \n                    The second made sure that the logged in user actually had permission to access the particular \n                    portion of the site they were trying to access (users could be given access to only certain\n                    function points of the site by site administrator). I set these 2 filters to be\n                    applied to all controller actions so they were validated everytime - even when the page was\n                    accessed through a deep link.\n                </p>\n                <div class=\"hidden-xs col-sm-2\"></div>\n                <a href=\"../img/admin-action-filter-applied.png\" class=\"col-xs-12 col-sm-8\">\n                    <img src=\"../img/admin-action-filter-applied.png\" alt=\"Login Action Filter Application\" />\n                </a>\n            </div>\n        "}]}],"symbols":[{"__symbol":0,"name":"PROJECTS","filePath":"/Users/AndrewStarr/Documents/vsCode/Personal Website/src/app/data-collections/projects.d.ts"}]}